---
import Layout from '../../layouts/Layout.astro';

// Since we're using Cloudflare to handle the dynamic routing,
// we'll change our approach for Astro static build
export function getStaticPaths() {
	// This is a workaround for static builds
	// In production, our Cloudflare Worker will handle the actual routing
	return [{ params: { id: 'index' } }];
}

const { id } = Astro.params;
const pasteId = id || 'placeholder';
---

<Layout title={`Pasteriser - View Paste ${pasteId}`}>
	<div class="container mx-auto px-4 py-8">
		<div id="paste-error" class="hidden text-center py-8">
			<div class="bg-destructive/10 border border-destructive/30 rounded-md p-6 max-w-md mx-auto">
				<h2 class="text-xl font-semibold text-destructive mb-2">Paste Not Found</h2>
				<p class="mb-4">The paste you are looking for may have expired or been deleted.</p>
				<a
					href="/"
					class="inline-block bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors"
				>
					Create a new paste
				</a>
			</div>
		</div>

		<div id="loading-container" class="text-center py-8">
			<div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
			<p class="mt-4">Loading paste...</p>
		</div>

		<div id="paste-container" class="hidden">
			<!-- The paste content will be inserted here by JavaScript -->
		</div>
	</div>
</Layout>

<script>
	// Prism.js is loaded globally in the Layout component

	// Get actual paste ID from URL
	const realPasteId = window.location.pathname.split('/').pop();

	// Fetch paste data when the page loads
	document.addEventListener('DOMContentLoaded', async () => {
		// Password handling elements
		const passwordContainer = document.createElement('div');
		passwordContainer.innerHTML = `
		<div class="bg-card border border-border rounded-md p-6 max-w-md mx-auto shadow-sm">
			<h2 class="text-xl font-semibold mb-2">Password Protected</h2>
			<p class="mb-4 text-muted-foreground">This paste is protected by a password.</p>
			<form id="password-form" class="space-y-4">
				<div>
					<label for="password" class="block text-sm font-medium mb-1">Password</label>
					<input type="password" id="password" name="password" required
						class="w-full px-3 py-2 border border-input rounded-md bg-background" />
				</div>
				<div id="password-error" class="text-destructive text-sm hidden">
					Incorrect password. Please try again.
				</div>
				<button type="submit"
					class="w-full inline-block bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors">
					Unlock Paste
				</button>
			</form>
		</div>
	`;

		async function fetchPaste(password = null) {
			try {
				// Create fetch options
				const options = {
					headers: {
						Accept: 'application/json',
					},
				};

				// If we have a password, send it as POST with JSON body
				if (password) {
					options.method = 'POST';
					options.headers['Content-Type'] = 'application/json';
					options.body = JSON.stringify({ password });
				}

				const response = await fetch(`/pastes/${realPasteId}`, options);

				// Handle password protected pastes
				if (response.status === 403) {
					const data = await response.json();

					// Check if it's a password required response
					if (data.requiresPassword) {
						// Show password form
						document.getElementById('loading-container')?.classList.add('hidden');
						document.querySelector('.container')?.appendChild(passwordContainer);

						// Set up password form submission
						document.getElementById('password-form')?.addEventListener('submit', async (e) => {
							e.preventDefault();
							const passwordInput = document.getElementById('password') as HTMLInputElement;
							const password = passwordInput?.value || '';

							// Hide error message
							document.getElementById('password-error')?.classList.add('hidden');

							// Show loading state
							const submitButton = e.target?.querySelector('button[type="submit"]');
							if (submitButton) {
								submitButton.textContent = 'Unlocking...';
								submitButton.setAttribute('disabled', 'true');
							}

							// Try fetching paste with password
							await fetchPaste(password);

							// Reset button state
							if (submitButton) {
								submitButton.textContent = 'Unlock Paste';
								submitButton.removeAttribute('disabled');
							}
						});
						return;
					} else if (data.error?.code === 'invalid_password') {
						// Show password error
						const errorElement = document.getElementById('password-error');
						if (errorElement) {
							errorElement.textContent = 'Incorrect password. Please try again.';
							errorElement.classList.remove('hidden');
						}

						// Focus on password field for retry
						const passwordInput = document.getElementById('password') as HTMLInputElement;
						if (passwordInput) {
							passwordInput.value = '';
							passwordInput.focus();
						}
						return;
					}

					throw new Error('Paste not found');
				}

				if (!response.ok) {
					throw new Error('Paste not found');
				}

				const paste = await response.json();

				// Update document title with paste title if available
				if (paste.title) {
					document.title = `${paste.title} - Pasteriser`;
				}

				// Remove password container if it exists
				if (passwordContainer.parentNode) {
					passwordContainer.parentNode.removeChild(passwordContainer);
				}

				// Hide loading container, show paste container
				const loadingContainer = document.getElementById('loading-container');
				if (loadingContainer) {
					loadingContainer.classList.add('hidden');
				}

				const pasteContainer = document.getElementById('paste-container');
				if (pasteContainer) {
					pasteContainer.classList.remove('hidden');
					pasteContainer.innerHTML = '';

					// Create a dynamic view for the paste
					const pasteDisplay = document.createElement('div');
					pasteDisplay.innerHTML = `
					<div class="bg-card text-card-foreground max-w-[900px] mx-auto font-sans border border-border rounded-lg shadow overflow-hidden">
						<div class="p-4 border-b border-border">
							<div class="text-xl font-bold mb-2">${paste.title || 'Untitled Paste'}</div>
							<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2 text-sm text-muted-foreground">
								<div>Created: ${new Date(paste.createdAt).toLocaleString()}</div>
								<div>Expires: ${new Date(paste.expiresAt).toLocaleString()}</div>
								${paste.language ? `<div>Language: ${paste.language}</div>` : ''}
								<div>Visibility: ${paste.visibility === 'public' ? 'Public' : 'Private'}</div>
								${paste.isPasswordProtected ? '<div>Password protected</div>' : ''}
								${paste.burnAfterReading ? '<div>Burn after reading</div>' : ''}
							</div>
						</div>

						<div class="p-4">
							${
								paste.burnAfterReading
									? `
								<div class="bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-900 p-3 rounded mb-4 text-amber-800 dark:text-amber-300">
									Warning: This paste will be permanently deleted after viewing.
								</div>
							`
									: ''
							}

							<pre class="line-numbers ${paste.language ? `language-${paste.language}` : ''} bg-muted/50 dark:bg-muted p-4 overflow-auto border border-border rounded text-sm font-mono leading-relaxed w-full text-left">
								<code id="paste-code-content" class="w-full block text-left">${paste.content || ' '}</code>
							</pre>
						</div>

						<div class="p-4 border-t border-border flex justify-between flex-wrap gap-2">
							<div class="space-x-2 space-y-2 sm:space-y-0">
								<button id="create-new-paste-btn" class="px-4 py-2 bg-secondary text-secondary-foreground rounded text-sm border border-border hover:bg-secondary/80 transition-colors">
									Create New Paste
								</button>
								<button id="view-raw-btn" class="px-4 py-2 bg-secondary text-secondary-foreground rounded text-sm border border-border hover:bg-secondary/80 transition-colors">
									View Raw
								</button>
								<button id="delete-paste-btn" class="px-4 py-2 bg-destructive/10 text-destructive rounded text-sm border border-destructive/20 hover:bg-destructive/20 transition-colors">
									Delete
								</button>
							</div>
							<div>
								<button id="copy-clipboard-btn" class="px-4 py-2 bg-secondary text-secondary-foreground rounded text-sm border border-border hover:bg-secondary/80 transition-colors">
									Copy to Clipboard
								</button>
							</div>
						</div>
					</div>
				`;

					pasteContainer.appendChild(pasteDisplay);

					// Apply syntax highlighting
					setTimeout(() => {
						if (paste.language && paste.language !== 'plaintext') {
							// Prism.js will be loaded globally via the Layout component
							if (window.Prism && typeof window.Prism.highlightAll === 'function') {
								window.Prism.highlightAll();
							}
						}
					}, 0);

					// Add event listeners
					document.getElementById('create-new-paste-btn')?.addEventListener('click', () => {
						window.location.href = '/';
					});

					document.getElementById('view-raw-btn')?.addEventListener('click', () => {
						window.open(`/pastes/raw/${paste.id}`, '_blank');
					});

					document.getElementById('delete-paste-btn')?.addEventListener('click', () => {
						// Import modal dynamically
						import('../../components/ui/modal').then(({ showConfirmModal }) => {
							showConfirmModal({
								title: 'Delete Paste',
								description: 'Are you sure you want to delete this paste? This action cannot be undone.',
								confirmText: 'Delete',
								cancelText: 'Cancel',
								isDangerous: true
							}).then(confirmed => {
								if (confirmed) {
									window.location.href = `/pastes/${paste.id}/delete`;
								}
							});
						}).catch(err => {
							console.error('Failed to load modal module:', err);
							// Fallback to browser confirm if modal fails
							if (confirm('Are you sure you want to delete this paste? This action cannot be undone.')) {
								window.location.href = `/pastes/${paste.id}/delete`;
							}
						});
					});

					document.getElementById('copy-clipboard-btn')?.addEventListener('click', () => {
						// Import would be at the top of the script in a regular module
						// but we're doing a dynamic import here inside the event listener
						import('../../components/ui/toast').then(({ toast }) => {
							if (navigator.clipboard) {
								navigator.clipboard
									.writeText(paste.content || '')
									.then(() => {
										toast({ 
											message: 'Copied to clipboard!', 
											type: 'success',
											duration: 2000
										});
									})
									.catch(() => {
										toast({ 
											message: 'Failed to copy to clipboard', 
											type: 'error',
											duration: 3000
										});
									});
							} else {
								toast({ 
									message: 'Clipboard access not available in your browser', 
									type: 'error',
									duration: 3000
								});
							}
						}).catch(err => {
							console.error('Failed to load toast module:', err);
							// Fallback to alert if toast module fails to load
							if (navigator.clipboard) {
								navigator.clipboard
									.writeText(paste.content || '')
									.then(() => alert('Copied to clipboard'))
									.catch(() => alert('Failed to copy'));
							} else {
								alert('Clipboard access not available');
							}
						});
					});
				}
			} catch (error) {
				console.error('Error fetching paste:', error);

				// Show error message, hide loading
				const loadingContainer = document.getElementById('loading-container');
				if (loadingContainer) {
					loadingContainer.classList.add('hidden');
				}

				const errorContainer = document.getElementById('paste-error');
				if (errorContainer) {
					errorContainer.classList.remove('hidden');
				}
			}
		}

		// Initial fetch attempt
		await fetchPaste();
	});
</script>

