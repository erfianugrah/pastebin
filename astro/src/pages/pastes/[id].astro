---
import Layout from '../../layouts/Layout.astro';
import CodeViewer from '../../components/CodeViewer';

// Since we're using Cloudflare to handle the dynamic routing,
// we'll change our approach for Astro static build
export function getStaticPaths() {
	// This is a workaround for static builds
	// In production, our Cloudflare Worker will handle the actual routing
	return [{ params: { id: 'index' } }];
}

const { id } = Astro.params;
const pasteId = id || 'placeholder';
---

<Layout title={`Pasteriser - View Paste ${pasteId}`}>
	<div class="container mx-auto px-4 py-8">
		<div id="paste-error" class="hidden text-center py-8">
			<div class="bg-destructive/10 border border-destructive/30 rounded-md p-6 max-w-md mx-auto">
				<h2 class="text-xl font-semibold text-destructive mb-2">Paste Not Found</h2>
				<p class="mb-4">The paste you are looking for may have expired or been deleted.</p>
				<a
					href="/"
					class="inline-block bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors"
				>
					Create a new paste
				</a>
			</div>
		</div>

		<div id="loading-container" class="text-center py-8">
			<div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
			<p class="mt-4">Loading paste...</p>
		</div>

		<div id="paste-container" class="hidden max-w-[900px] mx-auto">
			<!-- The paste content will be inserted here by JavaScript -->
		</div>
		
		<div id="password-container" class="hidden max-w-md mx-auto">
			<div class="bg-card border border-border rounded-md p-6 shadow-sm">
				<h2 class="text-xl font-semibold mb-2">Password Protected</h2>
				<p class="mb-4 text-muted-foreground">This paste is protected by a password.</p>
				<form id="password-form" class="space-y-4">
					<div>
						<label for="password" class="block text-sm font-medium mb-1">Password</label>
						<input type="password" id="password" name="password" required
							class="w-full px-3 py-2 border border-input rounded-md bg-background" />
					</div>
					<div id="password-error" class="text-destructive text-sm hidden">
						Incorrect password. Please try again.
					</div>
					<button type="submit"
						class="w-full inline-block bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors">
						Unlock Paste
					</button>
				</form>
			</div>
		</div>
	</div>
</Layout>

<script>
	import { toast } from '../../components/ui/toast';
	import { showConfirmModal } from '../../components/ui/modal';
	import { hydrateReactComponent } from '../../lib/react-hydration';
	
	// Get actual paste ID from URL
	const realPasteId = window.location.pathname.split('/').pop();
	let pasteData = null;
	let decryptedContent = null;
	
	// Function to get decrypted content
	function getDecryptedContent() {
		return decryptedContent;
	}
	
	// Generate a unique session token for secure communication
	const sessionToken = crypto.getRandomValues(new Uint32Array(4)).join('-');
	
	// Create a secure communication channel using a unique event name
	const secureEventName = `paste-decrypted-${sessionToken}`;
	let contentSetPromise = null;
	
	// Listen for secure decryption events with session validation
	window.addEventListener(secureEventName, (event) => {
		// Validate event structure and token
		if (!contentSetPromise && 
			event.detail && 
			event.detail.content && 
			event.detail.token === sessionToken) {
			
			contentSetPromise = Promise.resolve().then(() => {
				if (decryptedContent === null) {
					decryptedContent = event.detail.content;
					return true;
				}
				return false;
			}).then(success => {
				if (success) {
					// Only log in development
					if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
						console.log('Decrypted content received securely');
					}
				} else {
					console.warn('Attempted to overwrite already set decrypted content');
				}
			});
		} else if (event.detail && (!event.detail.token || event.detail.token !== sessionToken)) {
			console.warn('Invalid or missing session token in decryption event');
		}
	});
	
	// Make session token available for CodeViewer in a secure way
	window.pasteSessionInfo = {
		eventName: secureEventName,
		token: sessionToken
	};

	// Fetch paste data when the page loads
	document.addEventListener('DOMContentLoaded', async () => {
		await fetchPaste();
	});

	async function fetchPaste(password = null) {
		try {
			// Create fetch options
			const options = {
				headers: {
					Accept: 'application/json',
				},
			};

			// If we have a password, send it as POST with JSON body
			if (password) {
				options.method = 'POST';
				options.headers['Content-Type'] = 'application/json';
				options.body = JSON.stringify({ password });
			}

			const response = await fetch(`/pastes/${realPasteId}`, options);

			// Handle password protected pastes
			if (response.status === 403) {
				const data = await response.json();
				
				// Log status and response for debugging
				console.log('HTTP 403 Response:', data);

				// Check if it's a password required response
				// In Phase 4, this should only happen for legacy pastes
				if (data.requiresPassword) {
					console.log('Password protection detected');
					// Hide loading, show password form
					document.getElementById('loading-container')?.classList.add('hidden');
					document.getElementById('password-container')?.classList.remove('hidden');

					// Setup password form handler if not already set
					if (!document.getElementById('password-form')?.getAttribute('data-handler-set')) {
						document.getElementById('password-form')?.addEventListener('submit', async (e) => {
							e.preventDefault();
							const passwordInput = document.getElementById('password') as HTMLInputElement;
							const password = passwordInput?.value || '';

							// Hide error message
							document.getElementById('password-error')?.classList.add('hidden');

							// Show loading state
							const submitButton = e.target?.querySelector('button[type="submit"]');
							if (submitButton) {
								submitButton.textContent = 'Unlocking...';
								submitButton.setAttribute('disabled', 'true');
							}

							// Hide password form, show loading again
							document.getElementById('password-container')?.classList.add('hidden');
							document.getElementById('loading-container')?.classList.remove('hidden');

							// Try fetching paste with password
							await fetchPaste(password);

							// Reset button state (in case of error)
							if (submitButton) {
								submitButton.textContent = 'Unlock Paste';
								submitButton.removeAttribute('disabled');
							}
						});

						// Mark the form as having handler set
						document.getElementById('password-form')?.setAttribute('data-handler-set', 'true');
					}
					return;
				} else if (data.error?.code === 'invalid_password') {
					// Show password form again
					document.getElementById('loading-container')?.classList.add('hidden');
					document.getElementById('password-container')?.classList.remove('hidden');

					// Show password error
					const errorElement = document.getElementById('password-error');
					if (errorElement) {
						errorElement.textContent = 'Incorrect password. Please try again.';
						errorElement.classList.remove('hidden');
					}

					// Focus on password field for retry
					const passwordInput = document.getElementById('password') as HTMLInputElement;
					if (passwordInput) {
						passwordInput.value = '';
						passwordInput.focus();
					}
					return;
				}

				// Other 403 error
				throw new Error('Paste not found');
			}

			if (!response.ok) {
				throw new Error('Paste not found');
			}

			// Store paste data
			pasteData = await response.json();

			// Update document title with paste title if available
			if (pasteData.title) {
				document.title = `${pasteData.title} - Pasteriser`;
			}
			
			// Check if this paste is actually password protected or not
			const isPasswordProtected = pasteData.isPasswordProtected || false;
			const isEncrypted = pasteData.isEncrypted || false;
			
			console.log('Paste details:', { 
				id: pasteData.id,
				isPasswordProtected,
				isEncrypted,
				visibility: pasteData.visibility,
			});

			// Hide loading container, show paste container
			document.getElementById('loading-container')?.classList.add('hidden');
			document.getElementById('password-container')?.classList.add('hidden');
			const pasteContainer = document.getElementById('paste-container');
			
			if (pasteContainer) {
				pasteContainer.classList.remove('hidden');
				
				// Check if we need to handle client-side decryption
				// If the paste is encrypted and has a key in the URL fragment, we need to decrypt
				if (pasteData.isEncrypted && window.location.hash.startsWith('#key=')) {
					console.log('Detected client-side encrypted paste with key in URL');
				}

				// Create client-side React component for the paste
				import('../../components/CodeViewer').then(({ default: CodeViewer }) => {
					// Try to hydrate the React component
					const success = hydrateReactComponent(CodeViewer, { paste: pasteData }, pasteContainer);
					
					// Fallback if hydration fails
					if (!success) {
						// Create fallback container safely without innerHTML to prevent XSS
						const fallbackContainer = document.createElement('div');
						fallbackContainer.className = 'p-4 bg-card border border-border rounded-md';
						
						// Create title element safely
						const titleElement = document.createElement('h2');
						titleElement.className = 'text-xl font-bold mb-2';
						titleElement.textContent = pasteData.title || 'Untitled Paste';
						
						// Create content element safely
						const contentElement = document.createElement('pre');
						contentElement.className = 'p-4 bg-muted/50 dark:bg-muted rounded-md overflow-auto font-mono text-sm';
						contentElement.textContent = pasteData.isEncrypted 
							? '[Encrypted content - Key required to view]' 
							: pasteData.content;
						
						fallbackContainer.appendChild(titleElement);
						fallbackContainer.appendChild(contentElement);
						pasteContainer.appendChild(fallbackContainer);
					}
					
					// Add buttons below the code viewer
					renderButtons(pasteContainer);
				});
			}
		} catch (error) {
			console.error('Error fetching paste:', error);

			// Show error message, hide loading
			document.getElementById('loading-container')?.classList.add('hidden');
			document.getElementById('password-container')?.classList.add('hidden');
			const errorContainer = document.getElementById('paste-error');
			if (errorContainer) {
				errorContainer.classList.remove('hidden');
			}
		}
	}
	
	function renderButtons(container) {
		// Create button container
		const buttonContainer = document.createElement('div');
		buttonContainer.className = 'mt-6 border-t border-border pt-4 flex justify-between flex-wrap gap-2';
		
		// Left side buttons
		const leftButtons = document.createElement('div');
		leftButtons.className = 'space-x-2 space-y-2 sm:space-y-0';
		
		// Create new paste button
		const createNewBtn = createButton('Create New Paste', 'secondary');
		createNewBtn.addEventListener('click', () => {
			window.location.href = '/';
		});
		leftButtons.appendChild(createNewBtn);
		
		// View raw button
		const viewRawBtn = createButton('View Raw', 'secondary');
		viewRawBtn.addEventListener('click', () => {
			// For encrypted content, create a blob with decrypted content and open it
			if (pasteData.isEncrypted && decryptedContent) {
				const blob = new Blob([decryptedContent], { type: 'text/plain' });
				const url = URL.createObjectURL(blob);
				window.open(url, '_blank');
				// Clean up the URL after a short delay
				setTimeout(() => URL.revokeObjectURL(url), 1000);
			} else if (pasteData.isEncrypted && !decryptedContent) {
				toast({ 
					message: 'Content is still being decrypted. Please wait.', 
					type: 'info',
					duration: 2000
				});
			} else {
				// For non-encrypted content, use the regular raw endpoint
				window.open(`/pastes/raw/${pasteData.id}`, '_blank');
			}
		});
		leftButtons.appendChild(viewRawBtn);
		
		// Delete button
		const deleteBtn = createButton('Delete', 'destructive');
		deleteBtn.addEventListener('click', () => {
			showConfirmModal({
				title: 'Delete Paste',
				description: 'Are you sure you want to delete this paste? This action cannot be undone.',
				confirmText: 'Delete',
				cancelText: 'Cancel',
				isDangerous: true
			}).then(confirmed => {
				if (confirmed) {
					window.location.href = `/pastes/${pasteData.id}/delete`;
				}
			});
		});
		leftButtons.appendChild(deleteBtn);
		
		// Right side buttons
		const rightButtons = document.createElement('div');
		
		// Copy to clipboard button
		const copyBtn = createButton('Copy to Clipboard', 'secondary');
		copyBtn.id = 'copy-content-btn';
		
		copyBtn.addEventListener('click', () => {
			// Use decrypted content if available, otherwise use original content
			const contentToCopy = (pasteData.isEncrypted && decryptedContent) ? 
				decryptedContent : 
				(pasteData.content || '');
			
			if (!contentToCopy) {
				toast({ 
					message: 'No content to copy.', 
					type: 'error',
					duration: 2000
				});
				return;
			}
			
			if (pasteData.isEncrypted && !decryptedContent) {
				toast({ 
					message: 'Content is still being decrypted. Please wait.', 
					type: 'info',
					duration: 2000
				});
				return;
			}
				
			if (navigator.clipboard) {
				navigator.clipboard
					.writeText(contentToCopy)
					.then(() => {
						toast({ 
							message: 'Copied to clipboard!', 
							type: 'success',
							duration: 2000
						});
					})
					.catch(() => {
						toast({ 
							message: 'Failed to copy to clipboard', 
							type: 'error',
							duration: 3000
						});
					});
			} else {
				toast({ 
					message: 'Clipboard access not available in your browser', 
					type: 'error',
					duration: 3000
				});
			}
		});
		rightButtons.appendChild(copyBtn);
		
		// Add button groups to container
		buttonContainer.appendChild(leftButtons);
		buttonContainer.appendChild(rightButtons);
		
		// Add the button container to the paste container
		container.appendChild(buttonContainer);
	}
	
	function createButton(text, variant = 'secondary') {
		const button = document.createElement('button');
		button.textContent = text;
		
		// Set button classes based on variant
		if (variant === 'destructive') {
			button.className = 'px-4 py-2 bg-destructive/10 text-destructive rounded text-sm border border-destructive/20 hover:bg-destructive/20 transition-colors';
		} else {
			button.className = 'px-4 py-2 bg-secondary text-secondary-foreground rounded text-sm border border-border hover:bg-secondary/80 transition-colors';
		}
		
		return button;
	}
</script>

<script>
	// Import our react hydration utilities
	import { initReactHydration } from '../../lib/react-hydration';
	
	// Initialize React in the global scope
	document.addEventListener('DOMContentLoaded', () => {
		initReactHydration();
	});
</script>