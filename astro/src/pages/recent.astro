---
import Layout from '../layouts/Layout.astro';
import { Debug } from 'astro:components';
---

<Layout title="Recent Pastes - Pasteriser">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">Recent Public Pastes</h1>
    
    <!-- Debug component to help troubleshoot -->
    <div class="hidden debug-only">
      <Debug data-from-server="Recent pastes page is rendering" />
    </div>
    
    <!-- Spinner shown while loading -->
    <div id="loading" class="py-12 text-center">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      <p class="mt-4">Loading recent pastes...</p>
    </div>
    
    <!-- Will be populated with paste data -->
    <div id="pastes-container" class="grid gap-4 hidden">
      <!-- Template for paste items will be inserted here by JavaScript -->
    </div>
    
    <!-- Empty state (hidden by default) -->
    <div id="empty-state" class="hidden py-12 text-center">
      <div class="mx-auto rounded-full w-16 h-16 bg-muted flex items-center justify-center mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="opacity-50">
          <path d="M12 7v10"/>
          <path d="M7 12h10"/>
        </svg>
      </div>
      <h2 class="text-xl font-semibold mb-2">No Public Pastes Found</h2>
      <p class="text-muted-foreground max-w-md mx-auto mb-6">There are no public pastes available to view. Create a new paste with public visibility to have it appear here.</p>
      <a href="/" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2">
        Create New Paste
      </a>
    </div>
  </div>
</Layout>

<script>
  // Create a paste element safely without innerHTML to prevent XSS
  function createPasteElement(paste) {
    // Main container
    const container = document.createElement('div');
    container.className = 'rounded-lg border bg-card text-card-foreground shadow-sm overflow-hidden';
    
    // Inner container
    const inner = document.createElement('div');
    inner.className = 'p-4 flex flex-col md:flex-row justify-between gap-2';
    
    // Left side with paste info
    const leftDiv = document.createElement('div');
    
    // Title
    const title = document.createElement('h3');
    title.className = 'font-medium text-lg truncate';
    title.textContent = paste.title || 'Untitled Paste';
    leftDiv.appendChild(title);
    
    // Metadata
    const metadata = document.createElement('div');
    metadata.className = 'text-muted-foreground text-sm flex flex-wrap gap-x-4 gap-y-1 mt-1';
    
    // Created date
    const createdSpan = document.createElement('span');
    createdSpan.textContent = `Created: ${formatDate(new Date(paste.createdAt))}`;
    metadata.appendChild(createdSpan);
    
    // Language (if exists)
    if (paste.language) {
      const langSpan = document.createElement('span');
      langSpan.textContent = `Language: ${paste.language}`;
      metadata.appendChild(langSpan);
    }
    
    // View count
    const viewsSpan = document.createElement('span');
    viewsSpan.textContent = `Views: ${paste.readCount}`;
    metadata.appendChild(viewsSpan);
    
    leftDiv.appendChild(metadata);
    
    // Right side with button
    const rightDiv = document.createElement('div');
    rightDiv.className = 'flex items-start gap-2';
    
    const viewLink = document.createElement('a');
    viewLink.href = `/pastes/${paste.id}`;
    viewLink.className = 'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2';
    viewLink.textContent = 'View';
    rightDiv.appendChild(viewLink);
    
    // Assemble everything
    inner.appendChild(leftDiv);
    inner.appendChild(rightDiv);
    container.appendChild(inner);
    
    return container;
  }

  // Helper function to format dates nicely
  function formatDate(date) {
    // Use toLocaleDateString for a shorter date format
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }

  // Fetch and display recent pastes
  async function loadRecentPastes() {
    // Ensure the UI elements exist before proceeding
    const loadingElement = document.getElementById('loading');
    const pastesContainer = document.getElementById('pastes-container');
    const emptyState = document.getElementById('empty-state');
    
    // If we can't find the required DOM elements, we're likely in an intermediate state
    if (!loadingElement || !pastesContainer || !emptyState) {
      console.warn('Recent pastes DOM elements not found, deferring load');
      return;
    }
    
    // Show loading immediately
    loadingElement.classList.remove('hidden');
    pastesContainer.classList.add('hidden');
    emptyState.classList.add('hidden');
    
    try {
      // Use a cache-busting parameter to avoid getting stale data during navigation
      const cacheBuster = `?_=${Date.now()}`;
      const response = await fetch('/api/recent' + cacheBuster);
      
      if (!response.ok) {
        throw new Error('Failed to fetch recent pastes');
      }
      
      const data = await response.json();
      const pastes = data.pastes || [];
      
      // Debug: Add more comprehensive data logging
      console.log('Recent pastes data:', {
        pasteCount: pastes.length,
        pastesData: pastes,
        rawResponse: data,
        timestamp: new Date().toISOString(),
        source: 'After fetch with cache-buster'
      });
      
      // Elements were already fetched at the beginning of this function
      
      // Hide loading
      if (loadingElement) {
        loadingElement.classList.add('hidden');
      }
      
      if (pastes.length > 0) {
        // Show pastes container
        if (pastesContainer) {
          pastesContainer.classList.remove('hidden');
          
          // Clear container first
          pastesContainer.innerHTML = '';
          
          // Create each paste element safely
          pastes.forEach(paste => {
            const pasteElement = createPasteElement(paste);
            pastesContainer.appendChild(pasteElement);
          });
        }
      } else {
        // Show empty state
        if (emptyState) {
          emptyState.classList.remove('hidden');
        }
      }
    } catch (error) {
      // Only log detailed error info in development
      if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
        console.error('Error fetching recent pastes:', error);
        console.log('Recent pastes fetch error details:', {
          message: error.message,
          stack: error.stack
        });
      } else {
        console.error('Error fetching recent pastes');
      }
      
      // Show empty state in case of error
      const loadingElement = document.getElementById('loading');
      const emptyState = document.getElementById('empty-state');
      
      if (loadingElement) {
        loadingElement.classList.add('hidden');
      }
      
      if (emptyState) {
        emptyState.classList.remove('hidden');
        // Update message to indicate error
        const title = emptyState.querySelector('h2');
        if (title) {
          title.textContent = 'Error Loading Pastes';
        }
        
        const description = emptyState.querySelector('p');
        if (description) {
          description.textContent = 'There was an error loading recent pastes. Please try again later.';
        }
      }
    }
  }

  // Load pastes when document is ready (initial page load)
  document.addEventListener('DOMContentLoaded', loadRecentPastes);
  
  // For View Transitions navigation - this event fires immediately after content swap
  document.addEventListener('astro:after-swap', () => {
    // Small delay to ensure DOM is fully ready after the swap
    setTimeout(loadRecentPastes, 10);
  });
  
  // Also keep the page-load event as a backup
  document.addEventListener('astro:page-load', loadRecentPastes);
  
  // Fallback for initial page load when not using View Transitions
  if (document.readyState === 'complete') {
    loadRecentPastes();
  }
</script>