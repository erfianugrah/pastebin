---
import Header from '../components/Header';
import Footer from '../components/Footer';
import { ToastContainer } from '../components/ui/toast';
import DelayedServiceWorker from '../components/DelayedServiceWorker';

interface Props {
	title: string;
	hideHeader?: boolean;
	hideFooter?: boolean;
	description?: string;
}

// Use consistent title
let { title, hideHeader = false, hideFooter = false, description } = Astro.props;

if (!title.includes('Pasteriser')) {
  title = `${title} - Pasteriser`;
}

// Default description
if (!description) {
  description = "A modern, secure code sharing service with syntax highlighting, password protection, and burn-after-reading functionality";
}

// Script to set the theme before page renders to avoid flashing
const themeScript = `
  // Get theme from localStorage or default to system
  const theme = localStorage.getItem('theme') || 'system';
  const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  
  // Apply the right theme class
  if (theme === 'dark' || (theme === 'system' && systemTheme === 'dark')) {
    document.documentElement.classList.add('dark');
  } else {
    document.documentElement.classList.add('light');
  }
`;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		
		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<meta name="keywords" content="pasteriser, code sharing, code snippet, syntax highlighting, secure paste, burn after reading, password protection, encryption, end-to-end encryption, developer tools" />
		<meta name="author" content="Erfi Anugrah" />
		<link rel="canonical" href={Astro.url.href} />
		
		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:site_name" content="Pasteriser" />
		<meta property="og:url" content={Astro.url.href} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL('/og-image.png', Astro.url)} />
		<meta property="og:image:width" content="1200" />
		<meta property="og:image:height" content="630" />
		<meta property="og:locale" content="en_US" />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={Astro.url.href} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={new URL('/og-image.png', Astro.url)} />
		
		<!-- Favicon -->
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="manifest" href="/site.webmanifest" />
		<meta name="theme-color" content="#4F46E5" />
		
		<!-- Generator Info -->
		<meta name="generator" content={Astro.generator} />
		
		<!-- Theme Script -->
		<script set:html={themeScript} />

		<!-- Structured Data -->
		<script type="application/ld+json">
			{
				"@context": "https://schema.org",
				"@type": "WebApplication",
				"name": "Pasteriser",
				"url": "https://pasteriser.com",
				"description": "A modern, secure code sharing service",
				"applicationCategory": "DeveloperApplication",
				"operatingSystem": "All",
				"offers": {
					"@type": "Offer",
					"price": "0",
					"priceCurrency": "USD"
				},
				"featureList": [
					"Syntax highlighting for 30+ languages",
					"Password protection",
					"End-to-end encryption",
					"Burn after reading",
					"Expiration options"
				]
			}
		</script>
		
		<!-- Accessibility Enhancements -->
		<meta name="color-scheme" content="dark light">
		
		<!-- Prism.js for Syntax Highlighting - Using installed npm package -->
		<style is:global>
			@import 'prismjs/themes/prism.css';
			@import 'prismjs/plugins/line-numbers/prism-line-numbers.css';
			@import 'prismjs/plugins/toolbar/prism-toolbar.css';
		</style>
	</head>
	<body class="min-h-screen flex flex-col bg-background text-foreground">
		<!-- Skip to main content link for accessibility -->
		<a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-primary text-white p-4 m-1 z-50">
			Skip to main content
		</a>
		
		{!hideHeader && <Header client:load />}
		<main id="main-content" class="flex-grow">
			<slot />
		</main>
		{!hideFooter && <Footer />}
		
		<ToastContainer client:load />
		<DelayedServiceWorker client:load />
		
		<!-- Prism.js Scripts - Using NPM package -->
		<script>
			// Import Prism and plugins
			import Prism from 'prismjs';
			
			// Import language components
			import 'prismjs/components/prism-typescript';
			import 'prismjs/components/prism-jsx';
			import 'prismjs/components/prism-tsx';
			import 'prismjs/components/prism-yaml';
			import 'prismjs/components/prism-json';
			import 'prismjs/components/prism-bash';
			import 'prismjs/components/prism-hcl';
			import 'prismjs/components/prism-toml';
			import 'prismjs/components/prism-docker';
			
			// Import plugins
			import 'prismjs/plugins/line-numbers/prism-line-numbers';
			import 'prismjs/plugins/toolbar/prism-toolbar';
			import 'prismjs/plugins/copy-to-clipboard/prism-copy-to-clipboard';
			
			// Make Prism available globally for our components
			window.Prism = Prism;
			
			// Highlight all code blocks when page loads
			document.addEventListener('DOMContentLoaded', () => {
				Prism.highlightAll();
			});
		</script>
	</body>
</html>
<style is:global>
	@import '../styles/globals.css';

	/* Custom UI and theme enhancements */
	.dark [data-theme="dark"] {
		display: block;
	}
	
	.light [data-theme="dark"] {
		display: none;
	}
	
	.dark [data-theme="light"] {
		display: none;
	}
	
	.light [data-theme="light"] {
		display: block;
	}
	
	/* Additional Prism.js customizations */
	pre[class*="language-"].line-numbers {
		padding-left: 3.5em;
	}

	/* Accessibility improvements */
	:focus {
		outline: 2px solid var(--color-primary);
		outline-offset: 2px;
	}

	.sr-only {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0, 0, 0, 0);
		white-space: nowrap;
		border-width: 0;
	}

	@media (prefers-reduced-motion: reduce) {
		*, *::before, *::after {
			animation-duration: 0.01ms !important;
			animation-iteration-count: 1 !important;
			transition-duration: 0.01ms !important;
			scroll-behavior: auto !important;
		}
	}
</style>